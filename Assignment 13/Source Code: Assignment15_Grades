#Seth Dunfield, CompSci 1010L, Lab Assignment 13: Unit Testing, Due Date: December 12th, 2021

import unittest
import Grades
import math

class Grade_test(unittest.TestCase):

    def test_total_returns_total_of_list(self):
        result = Grades.total([1, 10, 22])
        self.assertEqual(result, 33, "The total function should return 33")
    def test_total_returns_0(self):
        result = Grades.total([])
        self.assertEqual(result, 0, "The total function should return 0")

    def test_average_one(self):
        result = Grades.average([2, 5, 9])
        self.assertAlmostEqual(1.33 + 4.0, 5.33333, 2)
    def test_average_two(self):
        result = Grades.average([2, 15, 22, 9])
        self.assertAlmostEqual(1.0 + 11.0, 12.0000, 4)
    def test_average_returns_nan(self):
        result = Grades.average([])
        self.assertIs(result, math.nan, "The function should return math.nan")

    def test_median_odd(self):
        result = Grades.median([2, 1, 5])
        self.assertEqual(result, 2, "The total function should return 2")
    def test_median_even(self):
        result = Grades.median([2, 7, 5, 9])
        self.assertEqual(result, "{:.1f}".format(6.00), "The total function should return 6")
    def test_median_returns_value_error(self):
        result = Grades.median([])
        self.assertRaises(ValueError)

if __name__ == "__main__":

    unittest.main()
    
    
